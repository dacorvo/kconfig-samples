# =============================================================================
# Build a target in the specified directory
# Usage:
# 	make -f Makefile.build DIR=<DIR> OUT=<OUT> AUTOCONFIG=<AUTOCONFIG>
# Where:
#  <DIR>        is the directory you want to build, relative from the tree top
#  <OUT>        is the path to the out-of-tree build directory
#  <AUTOCONFIG> is the path to the Kconfig auto.conf file
# =============================================================================

ifndef DIR
	$(error Incorrect invocation of Makefile.build: DIR unspecified)
endif

# If no output directory was specified, assume in-tree
OUT ?= .

# If no auto.conf file was specified, assume default
AUTOCONFIG ?= $(OUT)/config/auto.conf

# This will eventually trigger everything
all:

# =============================================================================
# Step 1: Load build configuration
#
# The build configuration for this specific directory is contained in:
# - the global auto.conf file generated by Kconfig
# - the specific Kbuild.mk file defining rules for this directory
# =============================================================================

# Reset Kconfig variables so
# 1) they have correct type
# 2) they do not inherit any value from the environment
obj-y :=

# Read Kconfig's auto.conf if it exists, otherwise ignore
-include $(AUTOCONFIG)

# Include local build configuration file if it exists, otherwise ignore
-include $(DIR)/Kbuild.mk

# =============================================================================
# Step 2: Check build configuration
#
# Evaluate what's to be done for that DIR based on what's in the obj-y
# variable populated by Kbuild.mk with the help of Kconfig's auto.conf
#
# The input of this phase is contained in:
# - obj-y:
#   A list of local object files and directories
#
# The output of this phase is contained in:
# - obj-y:
#   A list of objects to be bundled into a built-in.o archive representing the
#   recursive conditional build of this directory
# - subdir-obj-y:
#   A list of dir/built-in.o to be obtained as a result of the recursive
#   conditional build of each subdirectory
# - subdir-y:
#   The actual list of subdirectories to descend into to produce subdir-obj-y
# =============================================================================

# First, identify if there are any directories specifed in obj-y that we need
# to descend into
__subdir-y	:= $(patsubst %/,%,$(filter %/, $(obj-y)))
subdir-y	+= $(__subdir-y)
subdir-y	:= $(sort $(subdir-y))

# Next, update the list of objects, replacing any specified directory by the
# archive object that will be produced when descending into it
obj-y		:= $(patsubst %/, %/built-in.o, $(obj-y))

# Remember the list of these archive objects, that will be used as a dependency
# to trigger the recursion into subdirectories
subdir-obj-y := $(filter %/built-in.o, $(obj-y))

# Prepend the subdirectories with the actual DIR
subdir-y := $(addprefix $(DIR)/,$(subdir-y))

# Prepend the objects with the actual build DIR
obj-y		:= $(addprefix $(OUT)/$(DIR)/,$(obj-y))
subdir-obj-y := $(addprefix $(OUT)/$(DIR)/,$(subdir-obj-y))

# =============================================================================
# Step 3: Define rules to descend into subdirectories
# =============================================================================

# Tell make to descend into subdirs to build the corresponding archive objects
$(sort $(subdir-obj-y)): $(subdir-y) ;

PHONY += $(subdir-y)
$(subdir-y):
	@echo "Descending into directory $@"
	$(MAKE) -f Makefile.build DIR=$@

# =============================================================================
# Step 4: Define rules to build objects in this directory
# =============================================================================

CFLAGS := $(CFLAGS) -I$(T)/include -I$(OUT)/config

# Create directory
$(OUT)/$(DIR):
	mkdir -p $@

# Build C files
$(OUT)/$(DIR)/%.o: $(DIR)/%.c
	$(CC) $(CFLAGS) -c -o $@ $<

# Create an archive with all objects
$(OUT)/$(DIR)/built-in.o: $(obj-y)
	$(AR) rcs $@ $^

# =============================================================================
# Step 5: Let's build
# =============================================================================

all: $(OUT)/$(DIR) $(OUT)/$(DIR)/built-in.o

.PHONY: $(PHONY)
